"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
var format_utility_1 = require("./format.utility");
var format_handlers_1 = require("./format.handlers");
var suf_regex_1 = require("suf-regex");
var SassTextLine = /** @class */ (function () {
    function SassTextLine(text, lineNumber) {
        this.lineNumber = lineNumber;
        this.text = text;
        this.isEmptyOrWhitespace = suf_regex_1.isEmptyOrWhitespace(text);
    }
    return SassTextLine;
}());
exports.SassTextLine = SassTextLine;
var SassTextDocument = /** @class */ (function () {
    function SassTextDocument(text) {
        this.rawText = text;
        var split = text.split(/\r?\n/g);
        this.lines = [];
        for (var i = 0; i < split.length; i++) {
            var LineText = split[i];
            this.lines.push(new SassTextLine(LineText, i));
        }
        this.lineCount = split.length;
    }
    SassTextDocument.prototype.lineAt = function (lineNumber) {
        if (this.lines !== undefined) {
            return this.lines[lineNumber];
        }
        else {
            return new SassTextLine('[ERROR] This error should never happen if it does then look in src/format.provider.ts => SassTextDocument => lineAt', -1);
        }
    };
    SassTextDocument.prototype.getText = function () {
        return this.rawText || '';
    };
    return SassTextDocument;
}());
exports.SassTextDocument = SassTextDocument;
var DefaultConfig = {
    convert: true,
    debug: false,
    deleteCompact: true,
    deleteEmptyRows: true,
    deleteWhitespace: true,
    enabled: true,
    replaceSpacesOrTabs: true,
    setPropertySpace: true
};
var SassFormatter = /** @class */ (function () {
    function SassFormatter() {
    }
    SassFormatter.Format = function (document, options, config) {
        if (config === undefined) {
            config = DefaultConfig;
        }
        config = Object.assign(DefaultConfig, config);
        if (config.enabled === true) {
            var enableDebug = config.debug ? config.debug : false;
            if (enableDebug) {
                console.log('FORMAT');
            }
            var result = '';
            var ALLOW_SPACE = false;
            var isInBlockComment = false;
            var ignoreLine = false;
            var isFirstLine = true;
            var CONTEXT = {
                convert: {
                    lastSelector: '',
                    wasLastLineCss: false
                },
                keyframes: {
                    is: false,
                    tabs: 0
                },
                tabs: 0,
                currentTabs: 0
                // lastHeader: { endedWithComma: false, offset: 0 }
            };
            for (var i = 0; i < document.lineCount; i++) {
                var line = document.lineAt(i);
                if (suf_regex_1.isBlockCommentStart(line.text)) {
                    isInBlockComment = true;
                }
                if (suf_regex_1.isBlockCommentEnd(line.text)) {
                    isInBlockComment = false;
                }
                if (ignoreLine || isInBlockComment) {
                    ignoreLine = false;
                }
                else {
                    if (suf_regex_1.isIgnore(line.text)) {
                        ignoreLine = true;
                    }
                    else {
                        if (suf_regex_1.isSassSpace(line.text)) {
                            ALLOW_SPACE = true;
                        }
                        // ####### Empty Line #######
                        if (line.isEmptyOrWhitespace || (config.convert ? suf_regex_1.isBracketOrWhitespace(line.text) : false)) {
                            // Context.lastHeader.endedWithComma = false;
                            var pass = true; // its not useless, trust me.
                            if (config.deleteEmptyRows && document.lineCount - 1 > i) {
                                var nextLine = document.lineAt(i + 1);
                                var compact = config.deleteCompact ? true : !suf_regex_1.isProperty(nextLine.text);
                                var nextLineWillBeDeleted = config.convert ? suf_regex_1.isBracketOrWhitespace(nextLine.text) : false;
                                if ((compact && !ALLOW_SPACE && nextLine.isEmptyOrWhitespace) || (compact && !ALLOW_SPACE && nextLineWillBeDeleted)) {
                                    if (enableDebug) {
                                        format_utility_1.LogFormatInfo(enableDebug, line.lineNumber, { title: 'DELETE', nextLine: nextLine });
                                    }
                                    pass = false;
                                    // result.push(new TextEdit(new Range(line.range.start, nextLine.range.start), ''));
                                }
                            }
                            if (line.text.length > 0 && pass && config.deleteWhitespace) {
                                format_utility_1.LogFormatInfo(enableDebug, line.lineNumber, { title: 'WHITESPACE' });
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                            }
                            else if (pass) {
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                            }
                        }
                        else {
                            var LOCAL_CONTEXT = __assign(__assign({}, format_handlers_1.FormatHandleLocalContext(line, CONTEXT, options)), { ResetTabs: suf_regex_1.isReset(line.text), isAnd_: suf_regex_1.isAnd(line.text), isProp: suf_regex_1.isProperty(line.text), indentation: format_utility_1.getIndentationOffset(line.text, CONTEXT.tabs, options.tabSize), isClassOrIdSelector: suf_regex_1.isClassOrId(line.text) });
                            //####### Block Header #######
                            if (LOCAL_CONTEXT.isClassOrIdSelector ||
                                suf_regex_1.isMixin(line.text) ||
                                suf_regex_1.isHtmlTag(line.text.trim().split(' ')[0]) ||
                                suf_regex_1.isStar(line.text) ||
                                LOCAL_CONTEXT.isIfOrElse ||
                                LOCAL_CONTEXT.ResetTabs ||
                                LOCAL_CONTEXT.isAnd_ ||
                                suf_regex_1.isBracketSelector(line.text) ||
                                suf_regex_1.isPseudo(line.text) ||
                                LOCAL_CONTEXT.isKeyframes ||
                                suf_regex_1.isEach(line.text)) {
                                var offset = format_utility_1.getCLassOrIdIndentationOffset(LOCAL_CONTEXT.indentation.distance, options.tabSize, CONTEXT.currentTabs, LOCAL_CONTEXT.ResetTabs);
                                CONTEXT.keyframes.is = LOCAL_CONTEXT.isKeyframes || LOCAL_CONTEXT.isKeyframesPoint;
                                ALLOW_SPACE = false;
                                var formatRes = format_handlers_1.FormatHandleBlockHeader({
                                    line: line,
                                    options: options,
                                    config: config,
                                    enableDebug: enableDebug,
                                    LocalContext: LOCAL_CONTEXT,
                                    offset: offset,
                                    Context: CONTEXT
                                });
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                                result += formatRes.edit;
                                CONTEXT = formatRes.context;
                            }
                            // ####### Properties #######
                            else if (LOCAL_CONTEXT.isProp || suf_regex_1.isInclude(line.text) || LOCAL_CONTEXT.isKeyframesPoint || LOCAL_CONTEXT.isIfOrElseAProp) {
                                var formatRes = format_handlers_1.FormatHandleProperty({
                                    config: config,
                                    enableDebug: enableDebug,
                                    LocalContext: LOCAL_CONTEXT,
                                    Context: CONTEXT,
                                    line: line,
                                    options: options
                                });
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                                result += formatRes.edit;
                                CONTEXT = formatRes.context;
                            }
                            // ####### Convert #######
                            else if (config.convert && suf_regex_1.isScssOrCss(line.text, CONTEXT.convert.wasLastLineCss) && !suf_regex_1.isComment(line.text)) {
                                var convertRes = format_utility_1.convertScssOrCss(line.text, options, CONTEXT.convert.lastSelector);
                                // Set Context Vars
                                // Context.lastHeader.endedWithComma = false;
                                CONTEXT.convert.wasLastLineCss = true;
                                format_utility_1.LogFormatInfo(enableDebug, line.lineNumber, { title: 'CONVERT', convert: true });
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                                result += convertRes.text;
                            }
                            else if (suf_regex_1.getDistanceReversed(line.text, options.tabSize) > 0 && config.deleteWhitespace) {
                                var lineText = line.text;
                                var convert = false;
                                if (config.convert && suf_regex_1.isScssOrCss(line.text, CONTEXT.convert.wasLastLineCss) && !suf_regex_1.isComment(line.text)) {
                                    var convertRes = format_utility_1.convertScssOrCss(lineText, options, CONTEXT.convert.lastSelector);
                                    lineText = convertRes.text;
                                    convert = true;
                                }
                                // Set Context Vars
                                // Context.lastHeader.endedWithComma = false;
                                CONTEXT.convert.wasLastLineCss = convert;
                                format_utility_1.LogFormatInfo(enableDebug, line.lineNumber, { title: 'TRAIL', convert: convert });
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                                result += lineText.trimRight();
                            }
                            else {
                                if (isFirstLine) {
                                    isFirstLine = false;
                                }
                                else {
                                    result += '\n';
                                }
                                result += line.text;
                            }
                        }
                    }
                }
            }
            if (config.debug) {
                console.log('RESULT:'.concat(result, ':END'));
            }
            return result;
        }
        else {
            return document.getText();
        }
    };
    return SassFormatter;
}());
exports.SassFormatter = SassFormatter;
