import { SassFormattingOptions, SassTextLine } from './format.provider';
/**
 * returns the relative distance that the class or id should be at.
 */
export declare function getCLassOrIdIndentationOffset(distance: number, tabSize: number, current: number, ignoreCurrent: boolean): number;
/**
 * adds or removes whitespace based on the given offset, a positive value adds whitespace a negative value removes it.
 */
export declare function replaceWithOffset(text: string, offset: number, options: SassFormattingOptions): string;
/**
 * returns the difference between the current indentation and the indentation of the given text.
 */
export declare function getIndentationOffset(text: string, indentation: number, tabSize: number): {
    offset: number;
    distance: number;
};
/**
 *
 */
export declare function isKeyframePoint(text: string, isAtKeyframe: boolean): boolean;
/**
 * if the Property Value Space is none or more that one, this function returns false, else true;
 */
export declare function hasPropertyValueSpace(text: string): boolean;
/**
 * converts scss/css to sass.
 */
export declare function convertScssOrCss(text: string, options: SassFormattingOptions, lastSelector: string): {
    text: string;
    increaseTabSize: boolean;
    lastSelector: string;
};
export declare function replaceSpacesOrTabs(text: string, useSpaces: boolean, tabSize: number): string;
interface LogFormatInfo {
    title: string;
    setSpace?: boolean;
    convert?: boolean;
    offset?: number;
    replaceSpaceOrTabs?: boolean;
    nextLine?: SassTextLine;
}
export declare function LogFormatInfo(enableDebug: boolean, lineNumber: number, info: LogFormatInfo): void;
export {};
