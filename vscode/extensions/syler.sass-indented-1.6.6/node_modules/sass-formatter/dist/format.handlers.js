"use strict";
exports.__esModule = true;
var format_utility_1 = require("./format.utility");
var suf_regex_1 = require("suf-regex");
function FormatHandleBlockHeader(i) {
    var replaceSpaceOrTabs = false;
    var convert = false;
    var lineText = i.line.text;
    var additionalTabs = 0;
    var edit = lineText;
    if (i.config.convert && suf_regex_1.isScssOrCss(i.line.text, i.Context.convert.wasLastLineCss) && !suf_regex_1.isComment(i.line.text)) {
        var convertRes = format_utility_1.convertScssOrCss(lineText, i.options, i.Context.convert.lastSelector);
        i.Context.convert.lastSelector = convertRes.lastSelector;
        if (convertRes.increaseTabSize) {
            additionalTabs = i.options.tabSize;
        }
        lineText = convertRes.text;
        convert = true;
    }
    if (!convert && i.LocalContext.isClassOrIdSelector) {
        i.Context.convert.lastSelector = '';
    }
    if (i.config.replaceSpacesOrTabs && i.options.insertSpaces ? /\t/g.test(lineText) : / /g.test(lineText)) {
        lineText = format_utility_1.replaceSpacesOrTabs(lineText, i.options.insertSpaces, i.options.tabSize);
        replaceSpaceOrTabs = true;
    }
    // if (i.Context.lastHeader.endedWithComma) {
    //   // additionalTabs -= i.options.tabSize;
    //   i.offset = i.Context.lastHeader.offset;
    // }
    // Set Context Vars
    // i.Context.convert.wasLastLineCss = convert;
    // if (lineText.trim().endsWith(',')) {
    //   i.Context.lastHeader.endedWithComma = true;
    // } else {
    //   i.Context.lastHeader.endedWithComma = false;
    // }
    // Return
    if (i.offset !== 0) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, { title: 'SET NEW TAB', convert: convert, replaceSpaceOrTabs: replaceSpaceOrTabs });
        edit = format_utility_1.replaceWithOffset(lineText, i.offset, i.options).trimRight();
    }
    else if (suf_regex_1.getDistanceReversed(i.line.text, i.options.tabSize) > 0 && i.config.deleteWhitespace) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, { title: 'TRAIL', convert: convert, replaceSpaceOrTabs: replaceSpaceOrTabs });
        edit = lineText.trimRight();
    }
    else if (convert || replaceSpaceOrTabs) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, { title: 'CHANGE', convert: convert, replaceSpaceOrTabs: replaceSpaceOrTabs });
        edit = lineText;
    }
    i.Context = FormatHandleSetTabs(i.Context, i.LocalContext, i.options, { additionalTabs: additionalTabs, offset: i.offset });
    return { edit: edit, context: i.Context, additionalTabs: additionalTabs };
}
exports.FormatHandleBlockHeader = FormatHandleBlockHeader;
function FormatHandleProperty(i) {
    var lineText = i.line.text;
    var setSpace = false;
    var convert = false;
    var replaceSpaceOrTabs = false;
    var edit = lineText;
    var isComment = suf_regex_1.isComment(i.line.text);
    if (!suf_regex_1.isHtmlTag(i.line.text) && !format_utility_1.hasPropertyValueSpace(i.line.text) && i.LocalContext.isProp && i.config.setPropertySpace) {
        lineText = lineText.replace(/(^[\t ]*[\$\w-]+:)[\t ]*/, '$1 ');
        setSpace = true;
    }
    if (i.config.convert && suf_regex_1.isScssOrCss(i.line.text, i.Context.convert.wasLastLineCss) && !isComment) {
        var convertRes = format_utility_1.convertScssOrCss(lineText, i.options, i.Context.convert.lastSelector);
        lineText = convertRes.text;
        convert = true;
    }
    // Set Context Vars
    // i.Context.lastHeader.endedWithComma = false;
    i.Context.convert.wasLastLineCss = convert;
    var move = i.LocalContext.indentation.offset !== 0 && !isComment;
    if (i.config.replaceSpacesOrTabs &&
        !move &&
        (i.options.insertSpaces ? /\t/g.test(lineText) : new RegExp(' '.repeat(i.options.tabSize), 'g').test(lineText))) {
        lineText = format_utility_1.replaceSpacesOrTabs(lineText, i.options.insertSpaces, i.options.tabSize);
        replaceSpaceOrTabs = true;
    }
    // Return
    if (move) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, {
            title: 'MOVE',
            convert: convert,
            setSpace: setSpace,
            offset: i.LocalContext.indentation.offset,
            replaceSpaceOrTabs: replaceSpaceOrTabs
        });
        edit = format_utility_1.replaceWithOffset(lineText, i.LocalContext.indentation.offset, i.options).trimRight();
    }
    else if (suf_regex_1.getDistanceReversed(i.line.text, i.options.tabSize) > 0 && i.config.deleteWhitespace) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, { title: 'TRAIL', convert: convert, setSpace: setSpace, replaceSpaceOrTabs: replaceSpaceOrTabs });
        edit = lineText.trimRight();
    }
    else if (setSpace || convert || replaceSpaceOrTabs) {
        format_utility_1.LogFormatInfo(i.enableDebug, i.line.lineNumber, { title: 'CHANGE', convert: convert, setSpace: setSpace, replaceSpaceOrTabs: replaceSpaceOrTabs });
        edit = lineText;
    }
    i.Context = FormatHandleSetTabs(i.Context, i.LocalContext, i.options);
    return { edit: edit, context: i.Context };
}
exports.FormatHandleProperty = FormatHandleProperty;
function FormatHandleLocalContext(line, CONTEXT, options) {
    var isPointCheck = format_utility_1.isKeyframePoint(line.text, CONTEXT.keyframes.is);
    if (CONTEXT.keyframes.is && isPointCheck) {
        CONTEXT.tabs = Math.max(0, CONTEXT.keyframes.tabs);
    }
    var isKeyframes = suf_regex_1.isKeyframes(line.text);
    var IS_IF_OR_ELSE_ = suf_regex_1.isIfOrElse(line.text);
    var isIfOrElseAProp = false;
    if (CONTEXT.keyframes.is && IS_IF_OR_ELSE_) {
        IS_IF_OR_ELSE_ = false;
        isIfOrElseAProp = true;
        CONTEXT.tabs = CONTEXT.keyframes.tabs + options.tabSize;
    }
    if (IS_IF_OR_ELSE_ && !CONTEXT.keyframes.is && suf_regex_1.isElse(line.text)) {
        isIfOrElseAProp = true;
        IS_IF_OR_ELSE_ = false;
        CONTEXT.tabs = Math.max(0, CONTEXT.currentTabs - options.tabSize);
    }
    return {
        isIfOrElse: IS_IF_OR_ELSE_,
        isIfOrElseAProp: isIfOrElseAProp,
        isKeyframes: isKeyframes,
        isKeyframesPoint: isPointCheck
    };
}
exports.FormatHandleLocalContext = FormatHandleLocalContext;
function FormatHandleSetTabs(CONTEXT, LOCAL_CONTEXT, options, headerStuff) {
    if (headerStuff === undefined) {
        // ยง set Tabs Property
        if (CONTEXT.keyframes.is && LOCAL_CONTEXT.isKeyframesPoint) {
            CONTEXT.tabs = Math.max(0, CONTEXT.keyframes.tabs + options.tabSize);
        }
        if (LOCAL_CONTEXT.isIfOrElseAProp && CONTEXT.keyframes.is) {
            CONTEXT.tabs = CONTEXT.keyframes.tabs + options.tabSize * 2;
        }
        else if (LOCAL_CONTEXT.isIfOrElseAProp && !CONTEXT.keyframes.is) {
            CONTEXT.tabs = CONTEXT.currentTabs;
        }
    }
    else {
        //ยง set Tabs Header Block
        if (LOCAL_CONTEXT.isKeyframes) {
            CONTEXT.keyframes.tabs = Math.max(0, LOCAL_CONTEXT.indentation.distance + headerStuff.offset + options.tabSize);
        }
        if (LOCAL_CONTEXT.ResetTabs) {
            CONTEXT.tabs = Math.max(0, LOCAL_CONTEXT.indentation.distance + headerStuff.offset);
            CONTEXT.currentTabs = CONTEXT.tabs;
        }
        else {
            CONTEXT.tabs = Math.max(0, LOCAL_CONTEXT.indentation.distance + headerStuff.offset + options.tabSize + headerStuff.additionalTabs);
            CONTEXT.currentTabs = CONTEXT.tabs;
        }
    }
    return CONTEXT;
}
